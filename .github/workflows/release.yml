name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.21)'
        required: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Determine version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Get version from upstream
          UPSTREAM_VERSION=$(curl -s https://api.github.com/repos/Kikobeats/free-email-domains/releases/latest | jq -r .tag_name | sed 's/^v//')
          VERSION="$UPSTREAM_VERSION"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ env.VERSION }}
        mvn versions:commit

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Configure Maven settings
      uses: actions/setup-java@v5
      with:
        java-version: 8
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        cache: maven

    - name: Run tests
      run: mvn clean test

    - name: Build and sign artifacts
      run: mvn clean package -Prelease
      env:
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Deploy to Maven Central
      run: mvn deploy -Prelease -DskipTests
      env:
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Verify artifacts exist
      run: |
        echo "Verifying that all required artifacts were generated..."
        ARTIFACTS=(
          "target/free-email-domains-java-${{ steps.version.outputs.version }}.jar"
          "target/free-email-domains-java-${{ steps.version.outputs.version }}-sources.jar"
          "target/free-email-domains-java-${{ steps.version.outputs.version }}-javadoc.jar"
        )

        for artifact in "${ARTIFACTS[@]}"; do
          if [ ! -f "$artifact" ]; then
            echo "Error: Required artifact not found: $artifact"
            exit 1
          else
            echo "âœ“ Found: $artifact ($(du -h "$artifact" | cut -f1))"
          fi
        done
        echo "All artifacts verified successfully"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Release v${{ steps.version.outputs.version }}

          ### Changes
          - Updated free email domains list
          - Synced with upstream [free-email-domains](https://github.com/Kikobeats/free-email-domains) v${{ steps.version.outputs.version }}

          ### Maven Dependency
          ```xml
          <dependency>
              <groupId>com.henricook</groupId>
              <artifactId>free-email-domains-java</artifactId>
              <version>${{ steps.version.outputs.version }}</version>
          </dependency>
          ```

          ### Gradle Dependency
          ```groovy
          implementation 'com.henricook:free-email-domains-java:${{ steps.version.outputs.version }}'
          ```

          **Note:** It may take up to 2 hours for the release to be available on Maven Central.
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        files: |
          target/free-email-domains-java-${{ steps.version.outputs.version }}.jar
          target/free-email-domains-java-${{ steps.version.outputs.version }}-sources.jar
          target/free-email-domains-java-${{ steps.version.outputs.version }}-javadoc.jar